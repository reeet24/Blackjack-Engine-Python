from mods.base_mod import BlackjackMod

class ExampleMod(BlackjackMod):
    name = "Example Mod"
    version = "1.0.0"
    description = "An example mod template."

    def register(self):
        self.dispatcher.connect('round_started', self.on_round_start)
        self.dispatcher.connect('card_dealt', self.on_card_dealt)
        self.dispatcher.connect('deck_shuffled', self.on_deck_shuffle)
        self.dispatcher.connect('round_resolved', self.on_round_resolved)

        self.registry.register_custom_card('-2', value=-2, count_value=1)
        self.registry.register_custom_game_stat('Pitty', 0, int)

        self.registry.register_custom_action('lucky_draw', self.draw_ace, self.can_draw_ace)

        print(f'ExampleMod Loaded!')

    def draw_ace(self, engineSelf, hand_index):
        hand_value = engineSelf.player_hands[hand_index].value()
        values = self.registry.get_game_constants().CARD_VALUES
        value = str(21 - hand_value)

        if value in values:
            engineSelf.deck.remove(value)
            engineSelf.player_hands[hand_index].cards.append(value)
            print(f"ðŸ’« You magically drew an {value}!")
            return True
        elif int(value) > 10:
            engineSelf.deck.remove('A')
            engineSelf.player_hands[hand_index].cards.append("A")
            print(f"ðŸ’« You magically drew an Ace!")
            return True
        else:
            print(f'Unable to draw card "{value}"')
            return True
    
    def can_draw_ace(self, handSelf):
        pitty = self.registry.get_custom_game_stat('Pitty')['current_value']
        return (len(handSelf.cards) == 2) and (pitty >= 10)

    def unregister(self):
        self.dispatcher.disconnect('round_started', self.on_round_start)
        self.dispatcher.disconnect('card_dealt', self.on_card_dealt)
        print(f'ExampleMod Unloaded!')

    def on_round_start(self, bet, engine):
        print(f"ExampleMod: A new round has begun! Bet placed: ${bet}.")

    def on_card_dealt(self, card, engine):
        print(f"ExampleMod: A {card} was dealt!")

    def on_deck_shuffle(self, deck, engine):
        print(f"ExampleMod: Deck '{deck}' has been shuffled")
    
    def on_round_resolved(self, results, engine):
        pitty = self.registry.get_custom_game_stat('Pitty')['current_value']
        if results[0]['result'] == 'bust':
            self.registry.set_custom_game_stat("Pitty", pitty + 1)
        elif results[0]['result'] == 'lose':
            self.registry.set_custom_game_stat("Pitty", pitty + 2)
        elif results[0]['result'] == 'win':
            self.registry.set_custom_game_stat("Pitty", pitty - 1)
        elif results[0]['result'] == 'blackjack':
            self.registry.set_custom_game_stat("Pitty", 0)
        print(f"ExampleMod: Round ended with results: '{results}' ")